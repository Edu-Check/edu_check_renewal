services:
  api:
    container_name: api-container
    environment:
      - TZ=Asia/Seoul
      - JAVA_OPTS=-Duser.timezone=Asia/Seoul
    build:
      context: ./api
      cache_to:
        - type=local,dest=/tmp/.build-cache/api,mode=max
      cache_from:
        - type=local,src=/tmp/.build-cache/api
    image: ${DOCKER_REGISTRY}/educheck-api-image:latest
    env_file:
      - .env
    networks:
      - db-network
      - cache-network
      - web-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  client:
    container_name: client-container
    build:
      context: ./client
      cache_to:
        - type=local,dest=/tmp/.build-cache/client,mode=max
      cache_from:
        - type=local,src=/tmp/.build-cache/client
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_APP_URL: ${VITE_APP_URL}
        VITE_HOLIDAY_API_KEY: ${VITE_HOLIDAY_API_KEY}
        VITE_HOLIDAY_BASE_URL: ${VITE_HOLIDAY_BASE_URL}
    image: ${DOCKER_REGISTRY}/educheck-client-image:latest
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - DOMAIN2={DOMAIN2}
    volumes:
      - /etc/letsencrypt/live/${DOMAIN}/privkey.pem:/etc/letsencrypt/live/${DOMAIN}/privkey.pem:ro
      - /etc/letsencrypt/live/${DOMAIN}/fullchain.pem:/etc/letsencrypt/live/${DOMAIN}/fullchain.pem:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web-network
    depends_on:
      - api

  flask_app:
    container_name: flask-app-container
    build:
      context: ./app
      cache_to:
        - type=local,dest=/tmp/.build-cache/app,mode=max
      cache_from:
        - type=local,src=/tmp/.build-cache/app
    image: ${DOCKER_REGISTRY}/educheck-app-image:latest
    env_file:
      - .env
    networks:
      - web-network
      - cache-network
      - db-network
    ports:
      - "5000:5000"
    depends_on:
      redis:
        condition: service_healthy

  redis:
    container_name: redis-container
    image: redis:latest
    volumes:
      - redis-volume:/data
    command: ["redis-server", "--appendonly", "yes"]
    env_file:
      - .env
    networks:
      - cache-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  mysql:
    container_name: mysql-container
    image: mysql:8.0
    volumes:
      - db-volume:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      - TZ=Asia/Seoul
    networks:
      - db-network
    # 개발을 위해 임시 포워딩
    ports:
      - ${MYSQL_PORT}:3306
    command: --default-time-zone=Asia/Seoul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  db-volume:
  redis-volume:

networks:
  db-network:
  cache-network:
  web-network:
