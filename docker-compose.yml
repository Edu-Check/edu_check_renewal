services:
  api:
    container_name: api-container
    environment:
      - TZ=Asia/Seoul
      - SPRING_PROFILES_ACTIVE=prod
      - JAVA_OPTS=-Duser.timezone=Asia/Seoul -Dspring.profiles.active=prod
    build:
      context: ./api
      cache_to:
        - type=local,dest=/tmp/.build-cache/api,mode=max
      cache_from:
        - type=local,src=/tmp/.build-cache/api
    image: ${DOCKER_REGISTRY}/educheck-api-image:latest
    env_file:
      - .env
    networks:
      - db-network
      - cache-network
      - web-network
      - message-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  rabbitmq:
    container_name: rabbitmq-container
    image: rabbitmq:3-management
    env_file:
      - .env
    ports:
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
      - "15692:15692"
    networks:
      - message-network
    volumes:
      - rabbitmq-volume:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  client:
    container_name: client-container
    build:
      context: ./client
      cache_to:
        - type=local,dest=/tmp/.build-cache/client,mode=max
      cache_from:
        - type=local,src=/tmp/.build-cache/client
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_APP_URL: ${VITE_APP_URL}
        VITE_HOLIDAY_API_KEY: ${VITE_HOLIDAY_API_KEY}
        VITE_HOLIDAY_BASE_URL: ${VITE_HOLIDAY_BASE_URL}
        VITE_API_KEY: ${VITE_API_KEY}
        VITE_AUTH_DOMAIN: ${VITE_AUTH_DOMAIN}
        VITE_PROJECT_ID: ${VITE_PROJECT_ID}
        VITE_STORAGE_BUCKET: ${VITE_STORAGE_BUCKET}
        VITE_MESSAGING_SENDER_ID: ${VITE_MESSAGING_SENDER_ID}
        VITE_APP_ID: ${VITE_APP_ID}
        VITE_MEASUREMENT_ID: ${VITE_MEASUREMENT_ID}
        VITE_VAPID_KEY: ${VITE_VAPID_KEY}
    image: ${DOCKER_REGISTRY}/educheck-client-image:latest
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - DOMAIN2=${DOMAIN2}
    volumes:
      - /etc/letsencrypt/live/${DOMAIN2}/privkey.pem:/etc/letsencrypt/live/${DOMAIN2}/privkey.pem:ro
      - /etc/letsencrypt/live/${DOMAIN2}/fullchain.pem:/etc/letsencrypt/live/${DOMAIN2}/fullchain.pem:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web-network
    depends_on:
      - api

  flask_app:
    container_name: flask-app-container
    build:
      context: ./app
      cache_to:
        - type=local,dest=/tmp/.build-cache/app,mode=max
      cache_from:
        - type=local,src=/tmp/.build-cache/app
    image: ${DOCKER_REGISTRY}/educheck-app-image:latest
    env_file:
      - .env
    networks:
      - web-network
      - cache-network
      - db-network
    ports:
      - "5000:5000"
    depends_on:
      redis:
        condition: service_healthy

  redis:
    container_name: redis-container
    image: redis:latest
    volumes:
      - redis-volume:/data
    command: ["redis-server", "--appendonly", "yes"]
    env_file:
      - .env
    networks:
      - cache-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  mysql:
    container_name: mysql-container
    image: mysql:8.0
    volumes:
      - db-volume:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    environment:
      - TZ=Asia/Seoul
    networks:
      - db-network
    # 개발을 위해 임시 포워딩
    ports:
      - ${MYSQL_PORT}:3306
    command: --default-time-zone=Asia/Seoul
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  mysql_exporter:
    container_name: mysql_exporter-container
    image: prom/mysqld-exporter:latest
    environment:
      - MYSQLD_EXPORTER_PASSWORD=${EXPORTER_PASSWORD}
    command:
      - "--mysqld.address=mysql-container:3306"
      - "--mysqld.username=exporter"
    networks:
      - db-network
      - monitor-network
    depends_on:
      - mysql
  
  redis_exporter:
    container_name: redis_exporter-container
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis-container:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - cache-network
      - monitor-network
    depends_on:
      - redis
    restart: unless-stopped
  
  node_exporter:
    container_name: node_exporter-container
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($|/)"
    restart: unless-stopped
    networks:
      - monitor-network
  
  cadvisor:
    container_name: cadvisor-container
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitor-network

  prometheus:
    container_name: prometheus-container
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/prometheus/prometheus.yml:ro
    command:
      - --storage.tsdb.retention.time=3d
      - --web.enable-lifecycle
    networks:
      - monitor-network

  grafana:
    container_name: grafana-container
    image: grafana/grafana:latest
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_PROTOCOL=http
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_DOMAIN=${DOMAIN}
    networks:
      - monitor-network
      - web-network


volumes:
  db-volume:
  redis-volume:
  rabbitmq-volume:
  grafana-data:

networks:
  db-network:
  cache-network:
  web-network:
  message-network:
  monitor-network:
